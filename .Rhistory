se2 = sigma*sqrt(1 + 1/nrow(mtcars) + (mtcars$wt-mean(mtcars$wt))^2/ssx)
se2
se2 = sigma*sqrt(1 + 1/nrow(mtcars) + (mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
se2
20.09+c(-1,1)*2*se2
20.09+c(-1,1)*2.042272*se2
sigma*sqrt(1/nrow(mtcars) + (mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
se2 = sigma*sqrt(1 + 1/nrow(mtcars) + (3-mean(mtcars$wt))^2/ssx)
se2
20.09+c(-1,1)*2.042272*se2
lm(1:10 ~ 1:10)
b = 1:10
a = 1:10
lm(b ~ a)
lm(b ~ a+1)
a = a + 1
a
lm(b ~ a+1)
lm(b ~ a)
mtcars
fit1 = lm(mpg ~ wt, data=mtcars)
fit2 = lm(mpg ~ wt-1, data=mtcars)
summary(fit1)
summary(fit2)
plot(a, b)
plot(a+1, b)
plot(1:5, 1:%)
plot(1:5, 1:5)
point(2:6, 1:5)
points(2:6, 1:5)
data(mtcars)
fit = lm(mpg ~ wt, data=mtcars)
summary(fit)
sd(resid(fit))
3.046*sqrt(1+1/nrow(mtcars))
predict(fit, data.frame(wt=mean(mtcars)))
predict(fit, data.frame(wt=mean(mtcars$wt)))
se = 3.046*sqrt(1+1/nrow(mtcars))
predict(fit, data.frame(wt=mean(mtcars$wt)))-qt(.975, df=30)*se
predict(fit, data.frame(wt=mean(mtcars$wt)))-qt(.95, df=30)*se
se
qt(.975, df=30)
plot(wt, mpg, data=mtcars)
plot(mtcars$wt, mtcars$mpg)
abline(lm(mpg ~ wt, data=mtcars))
mean(mtcars$wt)
mean(mtcars$mpg)
xVals = seq(min(mtcars$wt), max(mtcars$wt), by = 0.1)
yVals = xVals * -5.3445 + 37.2851
ssx = sum((mtcars$wt - mean(mtcars$wt))^2)
ssx
se2 = 3.046 * sqrt(1 + 1/n + (xVals -mean(mtcars$wt))^2/ssx)
se2 = 3.046 * sqrt(1 + 1/nrow(mtcars) + (xVals -mean(mtcars$wt))^2/ssx)
lines(xVals, yVals + qt(.975, df=30)* se2)
lines(xVals, yVals - qt(.975, df=30)* se2)
summary(fit)
sumCoef = summary(fit)$coefficients
sumCoef
sumCoef[2, 1] + c(-1, 1)* qt(.975, df = 30) * sumCoef[2, 2]
-6.486*2
xVals
(yVals + qt(.975, df = 30)*se2)[16]
lines(xVals, mean(mtcars$mpg))
lines(xVals, rep(mean(mtcars$mpg), length(xVals)))
sum((mtcars$mpg - mean(mtcars$mpg))^2)
sum((resid(fit))^2)
sum((resid(fit))^2)/1126
mean(mtcars$wt)
(yVals + qt(.975, df = 30)*se2)[18]
(yVals - qt(.975, df = 30)*se2)[18]
(yVals - qt(.975, df = 30)*(sigma*sqrt(1/nrow(mtcars))))[18]
(yVals - qt(.975, df = 30)*(3.046*sqrt(1/nrow(mtcars))))[18]
(mean(mtcars$mpg) - qt(.975, df = 30)*(3.046*sqrt(1/nrow(mtcars))))
data = readline("http://biostat.jhsph.edu/~jleek/contact.html")
data = readline("http://biostat.jhsph.edu/~jleek/contact.html")
data = readLines("http://biostat.jhsph.edu/~jleek/contact.html")
data[1]
nchar(data[10])
nchar(data[20])
nchar(data[30])
nchar(data[100])
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
predictors
summary(predictors)
summary(diagnosis)
dim(diagnosis)
diagnosis
?createPartitionData
?createDataPartition
adData = data.frame(diagnosi, predictors)
adData = data.frame(diagnosis, predictors)
dim(predictors)
adData[1:10, ]
length(diagnosis)
trainIndex = createDataPartition(diagnosis, p=0.5)
trainIndex
trainIndex = createDataPartition(diagnosis, p=0.5, list=FALSE)
trainIndex
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
mixtures[1:5,]
qplot(1:nrow(mixtures), CompressiveStrength, data=mixtures)
mixtures$FlyAsh
qplot(mixtures$FlyAsh)
colnames(mixtures)
qplot(1:nrow(mixtures), CompressiveStrength, data=training)
qplot(1:nrow(training), CompressiveStrength, data=training)
qplot(1:nrow(CompressiveStrength), CompressiveStrength, data=testing)
qplot(1:nrow(testing), CompressiveStrength, data=testing)
qplot(1:nrow(training), CompressiveStrength, data=training)
qplot(1:nrow(training), CompressiveStrength, data=training, color=Cement)
qplot(1:nrow(training), CompressiveStrength, data=training, color=BlastFurnaceSlag)
qplot(1:nrow(training), CompressiveStrength, data=training, color=FlyAsh)
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=5))
library(Hmisc)
install.packages("Hmisc")
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=5))
library(Hmisc)
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=5))
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=3))
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=2))
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=1))
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=6))
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=7))
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=8))
?cut2
summarize(training$FlyAsh)
summary(training$FlyAsh)
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=5))
histogram(mixtures$CompressiveStrength)
qplot(1:nrow(training), CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=5))
View(training)
qplot(1:nrow(training), FlyAsh, data=training)
colnames(training)
qplot(1:nrow(training), Cement, data=training)
qplot(1:nrow(training), BlastFurnaceSlag, data=training)
qplot(1:nrow(training), Water, data=training)
qplot(1:nrow(training), Superplasticizer, data=training)
qplot(1:nrow(training), CoarseAggregate, data=training)
qplot(1:nrow(training), FineAggregate, data=training)
qplot(1:nrow(training), Age, data=training)
histogram(training$Superplasticizer)
histogram(log(training$Superplasticizer))
histogram(log(training$Superplasticizer)_1)
histogram(log(training$Superplasticizer)+1)
summary(training$Superplasticizer)
qplot(Superplasticizer, data=training, geom="density")
qplot(log(Superplasticizer), geom="density")
qplot(log(training$Superplasticizer), geom="density")
qplot(log(training$Superplasticizer+1), geom="density")
log(training$Superplasticizer)
log(training$Superplasticizer+1)
histlog(training$Superplasticizer)
hist(log(training$Superplasticizer))
log(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
qplot(log(training$Superplasticizer), geom="density")
qplot(log(training$Superplasticizer+1), geom="density")
qplot(training$Superplasticizer, geom="density")
summary(training$Superplasticizer)
summary(log(training$Superplasticizer))
summary(log(training$Superplasticizer+1))
log(0.05)
log(1.05)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(predictors)
which(colnames(predictors) == "IL")
which(colnames(predictors) == "IL*")
ILs = 57:68
ILs
length(ILs)
?preProcess
preProc = preProcess(training[ , ILs], method="pca")
preProc
preProc = preProcess(training[ , ILs], method="pca", thresh=.80)
preProc
mydata = training[, c(1, ILs)]
summary(mydata)
colnames(training)
ILs
ILs = ILs[-1]
ILs
preProc = preProcess(training[ , ILs], method="pca", thresh=.80)
preProc
ILs = c(ILs, 69)
ILs
colnames(training)[ILs]
preProc = preProcess(training[ , ILs], method="pca", thresh=.80)
preProc
mydata = training[ , c(1, ILs)]
PCA = preProcess(mydata, method="pca", thresh=0.8)
PCA = preProcess(mydata[ , -1], method="pca", thresh=0.8)
PCA
PCAres = predict(PCA, mydata)
PCAres = predict(PCA, mydata[ , -1])
modelFitPCA = train(mydata$diagnosis ~. , method = "glm", data=PCAres)
install.packages("e1071")
modelFitPCA = train(mydata$diagnosis ~. , method = "glm", data=PCAres)
mytest = testing[ ,c(1, ILs)]
testPC = predict(PCA, mytest[ , -1])
confusionMatrix(mytest$diagnosis, predict(modelFitPCA, testPC))
PCAres
preProc
modelFitPCA
predict(modelFitPCA, testPC)
dim(PCAres)
head(PCAres)
modelFit = train(training$diagnosis ~ ., method="glm", data=training[ , -1])
warnings()
confusionMatrix(testing$diagnosis, predict(modelFit, testing[ , -1]))
modelFit = train(diagnosis ~ ., data=training, method="glm")
head(mydata)
mytrain = mydata
head(mydtest)
head(mytest)
modelFit = train(mytrain$diagnosis ~ ., method="glm", preProcess = "pca", data= mytrain)
confusionMatrix(mytest$diagnosis, predict(modelFit, mytest))
modelFit = train(mytrain$diagnosis ~ ., method="glm", data= mytrain)
confusionMatrix(mytest$diagnosis, predict(modelFit, mytest))
modelFit = train(mytrain$diagnosis ~ ., method="glm", preProcess = "pca", data= mytrain, thresh=0.8)
?train
preProc
modelFit = train(mytrain$diagnosis ~ ., method="glm", preProcess = preProc, data= mytrain, thresh=0.8)
modelFit = train(mytrain$diagnosis ~ ., method="glm", preProcess = preProc, data= mytrain)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
sapply(training[,1:8],cut2,g=4) -> training[,1:8]
training
qplot(1:nrow(training), training$CompressiveStrength)
qplot(1:nrow(training), training$CompressiveStrength, color=training$Cement)
par(mfrow = c(4, 2))
qplot(1:nrow(training), training$CompressiveStrength, color=training$Cement)
plot(1:nrow(training), training$CompressiveStrength, color=training$Cement)
str(trainig)
str(training)
par(mfcol=c(2,4))
for (i in 1:8) {plot(training$CompressiveStrength,main=names(training[i]),xlab="stepwise index",ylab="CompressiveStrength",col=training[,i])}
training$Cement
qplot(1:nrow(training), training$CompressiveStrength, color=training$Cement)
colnames(training)
qplot(1:nrow(training), training$CompressiveStrength, color=training$Age)
qplot(1:nrow(training), training$CompressiveStrength, color=training$FineAggregate)
qplot(1:nrow(training), training$CompressiveStrength, color=training$FlyAsh)
qplot(1:nrow(training), training$CompressiveStrength, color=training$Age)
summary(training$Age)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(training)
ILs = 58:69
colnames(training)[ILs]
mytrain = training[ ,c(1, ILs)]
preProcess(mytrain[ , -1], method = "pca", thresh=0.9)
setwd("~/DataScience/ReproducibleResearch/RepData_PeerAssessment1")
data = read.csv(unzip(zipfile="activity.zip"))
library(lattice)
head(data)
histogram(data$steps)
DT = data.table(data)
library(data.tabl)
library(data.table)
install.packages("data.table")
library(data.table)
DT = data.table(data)
DT[1:10, ]
DT[ , sum(steps), by=date]
histogram(DT[ , sum(steps), by=date])
histogram(DT[ , sum(steps), by=date][ , 2])
DT[ , sum(steps), by=date][ , 2]
DT[ , sum(steps), by=date][ ]
DT[ , sum(steps), by=date]$V1
histogram(DT[ , sum(steps), by=date]$V1)
histogram(DT[ , sum(steps), by=date]$V1, xlab="Total # of steps per day")
histogram(DT[ , sum(steps), by=date]$V1, xlab="Total # of steps per day", bin=10)
library(ggplot2)
qplot(DT[ , sum(steps), by=date]$V1,geom = "density")
qplot(DT[ , sum(steps), by=date]$V1)
qplot(DT[ , sum(steps), by=date]$V1, xlab="Total # of steps per day")
sort(DT[ , sum(steps), by=date]$V1)
sort(DT[ , sum(steps), by=date]$V1)[27]
mean(DT[ , sum(steps), by=date]$V1)
mean(DT[ , sum(steps), by=date]$V1,na.rm=T)
data[which(data$date == "2012-11-08"), ]
sum(data[which(data$date == "2012-11-08"), 1])
DT[ , mean(steps), by=interval]
DT[ , mean(steps, na.rm=T), by=interval]
qplot(data$interval, DT[ , mean(steps, na.rm=T), by=interval])
qplot(data$interval, DT[ , mean(steps, na.rm=T), by=interval]$V1)
DT[ , mean(steps, na.rm=T), by=interval]$V1
qplot(DT[ , mean(steps, na.rm=T), by=interval]$V1)
qplot(unique(data$interval), DT[ , mean(steps, na.rm=T), by=interval]$V1)
qplot(unique(data$interval), DT[ , mean(steps, na.rm=T), by=interval]$V1, geom="line")
which.max(DT[ , mean(steps, na.rm=T), by=interval]$V1)
DT[ , mean(steps, na.rm=T), by=interval]$V1
unique(data$interval)[which.max(DT[ , mean(steps, na.rm=T), by=interval]$V1)]
max(DT[ , mean(steps, na.rm=T), by=interval]$V1)
library(caret)
oSteps = data$steps
length(which(is.na(oSteps)))
nSteps = predict(preProcess(oSteps, method="knnImpute"), oSteps)
dim(oSteps)
oSteps[1:10,]
oSteps[1:10]
?preProcess
qplot(oSteps)
qplot(1:length(oSteps), oSteps)
DT[ , mean(steps, na.rm=T), by=interval]
DT[ , avgStep=mean(steps, na.rm=T), by=interval]
?data.table
DT[ "V1", avgStep=mean(steps, na.rm=T), by=interval]
DT[V1, avgStep=mean(steps, na.rm=T), by=interval]
DT[ , mean(steps, na.rm=T), by=interval]
class(DT[ , mean(steps, na.rm=T), by=interval])
avgStepsPerInterval = DT[ , mean(steps, na.rm=T), by=interval])
avgStepsPerInterval = DT[ , mean(steps, na.rm=T), by=interval]
avgStepsPerInterval[1,]
avgStepsPerInterval["interval",]
avgStepsPerInterval[ , v1]
avgStepsPerInterval[ , V1]
avgStepsPerInterval[ , interval]
avgStepsPerInterval[ , list(interval)]
avgStepsPerInterval[ , sum(interval)]
avgStepsPerInterval[1:5 , sum(interval)]
avgStepsPerInterval["5",]
avgStepsPerInterval["5"]
setkey(avgStepsPerInterval, interval)
avgStepsPerInterval["5"]
avgStepsPerInterval[5]
avgStepsPerInterval$interval
class(avgStepsPerInterval$interval)
avgStepsPerInterval["5"]
avgStepsPerInterval[5]
avgStepsPerInterval[6]
avgStepsPerInterval[interval==5]
avgStepsPerInterval[interval==20]
avgStepsPerInterval[interval==21]
avgStepsPerInterval
aSpInt = DT[ , mean(steps, na.rm=T), by=interval]
data[1:10, ]
ndata = data
for (i in 1:nrow(ndata)) { if (is.na(ndata$steps[i])) {ndata$steps[i] = aSpInt$V1[which(aSpInt$interval == ndata$interval[i])]} }
ndata[1:10, ]
aSpInt = DT[ , mean(steps, na.rm=T), by=interval]; impData = data
for (i in 1:nrow(impData)) {
if (is.na(impData$steps[i])) {
impData$steps[i] = aSpInt$V1[which(aSpInt$interval == impData$interval[i])]
}
}
iDT = data.table(impData)
iDT[ , sum(steps), by=date]
sum(iDT[ , sum(steps), by=date]$V1)
sum(DT[ , sum(steps), by=date]$V1)
DT[ , sum(steps), by=date]$V1
DT[ , sum(steps, na.rm=T), by=date]$V1
sum(DT[ , sum(steps), by=date]$V1, na.rm=T)
sum(iDT[ , sum(steps), by=date]$V1, na.rm=T)
iDT[ , sum(steps), by=date]$V1, na.rm=T
iDT[ , sum(steps), by=date]$V1
(656737.5-570608)/10766.19
(656737.5-570608)
cbind(DT[ , sum(steps), by=date]$V1, iDT[ , sum(steps), by=date]$V1)
iDT[1:10]
weekdays(iDT$date)
iDT$date
iDT[ , wd:=weekdays(as.Date(date))]
iDT[1:10]
?weekdays
iDT$wd
iDT[ , wd:=weekdays(as.Date(date))]
iDT[1:10]
iDT[ , wd:=factor(weekdays(as.Date(date)))]
iDT[1:10]
summary(iDT)
iDT$wd
iDT[ , wd:=factor(ifelse(weekdays(as.Date(date)) %in% c("Saturday", "Sunday"),"weekend", "weekday"))]
iDT[1:10, ]
summary(iDT)
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval])
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1)
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line")
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facet=day)
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facet=iDT$day)
?qplot
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facets=iDT$day)
?qplot
qplot(mpg, wt, data=mtcars, facets=vs ~ am)
qplot(mpg, wt, data=mtcars, facets=~ am)
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facets=~iDT$day)
iDT$day
iDT[1:10, ]
iDT[ , day:=factor(ifelse(weekdays(as.Date(date)) %in% c("Saturday", "Sunday"),"weekend", "weekday"))]
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facets=~iDT$day)
iDT[1:10, ]
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facets=~iDT$day)
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facets=iDT$day)
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facets= date ~ day)
qplot(mpg, wt, data=mtcars, facets= vs ~)
qplot(mpg, wt, data=mtcars, facets= vs ~ )
qplot(mpg, wt, data=mtcars, facets= .~ vs)
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facets=.~iDT$day)
iDT = data.table(impData)
iDT[ , day:=factor(ifelse(weekdays(as.Date(date)) %in% c("Saturday", "Sunday"),"weekend", "weekday"))]
head(iDT)
summary(iDT)
iDT$day
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", facets=.~iDT$day)
qplot(unique(impData$interval), iDT[ , sum(steps), by=interval]$V1, geom="line", data=iDT, facets=.~day)
weekends -iDT[day=="weekend"]
weekends = iDT[day=="weekend"]
weekends[1:10, ]
qplot(unique(impData$interval), iDT[ , mean(steps), by=interval]$V1, geom="line", data=iDT, facets=.~day)
qplot(unique(impData$interval), iDT[ , mean(steps), by=c("interval", "day")]$V1, geom="line", data=iDT, facets=.~day)
iDT[ , mean(steps), by=interval]
iDT[ , sum(steps), by=interval]
iDT[ , mean(steps), by=day]
?data.table
?xyplot
require(stats)
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
summary(quakes)
xyplot(unique(impData$interval) ~ iDT[ , mean(steps), by=interval] | day, data=iDT)
xyplot(unique(interval) ~ iDT[ , mean(steps), by=interval] | day, data=iDT)
xyplot(unique(iDT$interval) ~ iDT[ , mean(steps), by=interval] | iDT$day)
summary(iDT)
unique(iDT$interval)
xyplot(unique(iDT$interval) ~ iDT[ , mean(steps), by=interval]$V1 | iDT$day)
xyplot(unique(iDT$interval) ~ iDT[ , mean(steps), by=interval]$V1 | iDT$day, type="l")
xyplot(iDT[ , mean(steps), by=interval]$V1 ~ unique(iDT$interval) | iDT$day, type="l")
xyplot(unique(weekends$interval), weekends[ , mean(steps), by=interval]$V1)
qplot(unique(weekends$interval), weekends[ , mean(steps), by=interval]$V1)
qplot(unique(weekends$interval), weekends[ , mean(steps), by=interval]$V1, geom="line")
qplot(unique(weekdays$interval), weekdays[ , mean(steps), by=interval]$V1, geom="line")
weekdayss = iDT[day=="weekday"]
qplot(unique(weekdays$interval), weekdays[ , mean(steps), by=interval]$V1, geom="line")
weekdays = iDT[day=="weekday"]
qplot(unique(weekdays$interval), weekdays[ , mean(steps), by=interval]$V1, geom="line")
qplot(unique(impData$interval), iDT[ , mean(steps), by=c("interval", "day")]$V1, geom="line", data=iDT, facets=.~day)
xyplot(unique(iDT$interval) ~ iDT[ , mean(steps), by=interval]$V1 | iDT$day, type="l")
xyplot(iDT[ , mean(steps), by=interval]$V1 ~ unique(iDT$interval) | iDT$day, type="l")
?xyplot
xyplot(iDT[ , mean(steps), by=interval]$V1 ~ unique(iDT$interval), type="l")
quakes[1:10, ]
weekdays
weekends
weekdays[ , mean(steps), by=interval]
weekdays[ , mean(steps), by=interval, day:="weekday"]
weekdays[ , mean(steps), by=interval][ , day:="weekday"]
weekdays
wdAvgs = weekdays[ , mean(steps), by=interval]
wdAvgs
wdAvgs[ , day:=factor("weekday")]
wdAvgs
weAvgs = weekends[ , mean(steps), by=interval]
weAvgs[ , day:=factor("weekend")]
test = rbind(wdAvgs, weAvgs)
class(test)
test
xyplot(V1 ~ interval | day, data=test)
xyplot(V1 ~ interval | day, data=test, type="l")
xyplot(V1 ~ interval | day, data=test, type="l",horizontal = T)
qplot(interval, V1, data=test, facets=.~day)
qplot(interval, V1, data=test, facets=.~day, type="l")
qplot(interval, V1, data=test, facets=.~day, geom="l")
qplot(interval, V1, data=test, facets=.~day, geom="line")
xyplot(V1 ~ interval | day, data=test, type="l",layout=c(2, 1))
xyplot(V1 ~ interval | day, data=test, type="l",layout=c(1, 2))
xyplot(V1 ~ interval | day, data=test, type="l",layout=c(1, 2), xlab="Number of steps")
xyplot(V1 ~ interval | day, data=test, type="l",layout=c(1, 2), ylab="Number of steps", xlab="Interval")
iDT[day=="weekday", mean(steps), by=interval]
iDT[day=="weekend", mean(steps), by=interval]
wdAvgs
(iDT[day=="weekend", mean(steps), by=interval])[, day:="weekday"]
(iDT[day=="weekend", mean(steps), by=interval])
(iDT[day=="weekend", mean(steps), by=interval])[day:="weekday"]
(iDT[day=="weekend", mean(steps), by=interval])[ , day:="weekday"]
a=(iDT[day=="weekend", mean(steps), by=interval])[ , day:="weekday"]
a
aaa = iDT[day="weekday", mean(steps), by=interval][ , day:="weekday"]
aaa = (iDT[day="weekday", mean(steps), by=interval])[ , day:="weekday"]
aaa = iDT[day=="weekday", mean(steps), by=interval][ , day:="weekday"]
aaa
